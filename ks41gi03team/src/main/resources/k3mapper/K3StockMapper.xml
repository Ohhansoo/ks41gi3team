<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="k3.stock.ahs.mapper.K3StockMapper">
	<resultMap id="stockResultMap" type="K3Stock" >
	<id column="stockCode" jdbcType="VARCHAR" property="stockCode"/>
 		<result column="warehousingCode" jdbcType="VARCHAR" property="warehousingCode" />
 		<result column="locationCode" jdbcType="VARCHAR" property="locationCode" />
 		<result column="stockQuantity" jdbcType="SMALLINT" property="stockQuantity" />
 		<result column="pileupManager" jdbcType="VARCHAR" property="pileupManager" />
 		<result column="pileupDate" jdbcType="DATE" property="pileupDate" />
		<association property="k3Contractor" javaType="K3Contractor">
			<id column="contractorId" property="contractorId"/>
			<result column="contractorName" property="contractorName" />
		</association>
		<association property="k3Product" javaType="K3Product">
		<id column="productCode" property="productCode"/>
		<result column="productName" property="productName" />
		</association>
		<association property="k3Category" javaType="K3Category">
			<id column="categoryCode" property="categoryCode"/>
			<result column="largeCategory" property="largeCategory"/>
			<result column="mediumCategory" property="mediumCategory"/>
			<result column="smallCategory" property="smallCategory"/>
		</association>
		<association property="k3Warehousing" javaType="K3Warehousing">
			<id column="warehousingCode" property="warehousingCode"/>
			<result column="laydownCheckCode" property="laydownCheckCode"/>
			<result column="laydownGoodsCount" property="laydownGoodsCount"/>
			<result column="laydownDate" property="laydownDate"/>
		</association>
	</resultMap>
	<!--재고 삭제처리  -->
	<delete id="k3DeleteStock" parameterType="list">
		DELETE
			s
		FROM
			k3_tb_stock AS s
			<trim prefix="WHERE" prefixOverrides="AND |OR">
				<foreach collection="list" item="deleteList">
					 or stockCode = #{deleteList}
				</foreach>
			</trim>
	</delete>
	
	<!--출고에 따른 재고 업데이트  -->
	<update id="k3SubtractStock">
		UPDATE 
			k3_tb_stock
		SET
			stockQuantity = #{stockQuantity}
		WHERE
			stockCode = #{stockCode};
	</update>
	
	<!--기존 재고확인  -->
	<select id="checkStockQuantity" resultType="int">
	SELECT
	 	s.stockQuantity
	FROM
		k3_tb_stock AS s
	WHERE
		s.stockCode = #{stockCode};
	</select>
	
	<!--상세재고현황 조회처리  -->
	<select id="k3GetDetailStockSearchList" resultType="map" parameterType="map">
		SELECT
			s.stockCode,
			w.laydownCheckCode,
			p.productName,
			s.stockQuantity,
			c.contractorName,
			p.categoryCode,
			t.largeCategory,
			t.mediumCategory,
			t.smallCategory,
			s.locationCode,
			s.pileupDate,
			m.memberName AS pileupManagerName
		FROM
			k3_tb_stock AS s
			INNER JOIN
			k3_tb_warehousing AS w
			ON
			s.warehousingCode = w.warehousingCode
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode
			INNER JOIN
			k3_tb_contractor_staff AS c
			ON
			w.contractorId = c.contractorId
			INNER JOIN
			k3_tb_total_category AS t
			ON
			p.categoryCode = t.categoryCode
			INNER JOIN
			k3_tb_member AS m
			ON
			s.pileupManager = m.memberId
			<if test="searchCondition.searchDetailStockType != null and searchCondition.searchDetailStockType != ''.toString()">
				<trim prefix="WHERE" prefixOverrides="AND |OR">
					<if test="searchCondition.detailStockValue != null and searchCondition.detailStockValue != ''.toString()">
			   			AND ${searchCondition.detailStockKey} LIKE CONCAT('%',#{searchCondition.detailStockValue},'%') 
					</if>	
					<if test="searchCondition.categoryValue != null and searchCondition.categoryValue != ''.toString()">
			   			AND ${searchCondition.categoryKey} LIKE CONCAT('%',#{searchCondition.categoryValue},'%') 
					</if>	
					<if test="searchCondition.searchStartDate != null and searchCondition.searchStartDate != ''.toString()">
			   			AND ${searchCondition.stockDateKey} >= #{searchCondition.searchStartDate}
					</if>	
					<if test="searchCondition.searchEndDate != null and searchCondition.searchEndDate != ''.toString()">
			   			AND #{searchCondition.searchEndDate} >=  ${searchCondition.stockDateKey}
					</if>
				</trim>
			</if>
			<if test="paramMap.startNum != null">
				LIMIT #{paramMap.startNum}, #{paramMap.rowPerPage};
			</if>
	</select>
	
	<!--간단재고현황 조회처리  -->
	<select id="k3GetSimpleStockSearchList" resultType="map" parameterType="map">
		SELECT
			p.productName,
			cs.contractorName,
			SUM(s.stockQuantity) AS stockQuantity
		FROM
			k3_tb_stock AS s
			INNER JOIN
			k3_tb_warehousing AS w
			ON
			s.warehousingCode = w.warehousingCode
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode
			INNER JOIN
			k3_tb_contractor_staff AS cs
			ON
			w.contractorId = cs.contractorId
			<if test="searchCondition.searchSimpleStockType != null and searchCondition.searchSimpleStockType != ''.toString()">
				<trim prefix="WHERE" prefixOverrides="AND |OR">
					<if test="searchCondition.simpleStockValue != null and searchCondition.simpleStockValue != ''.toString()">
			   			AND ${searchCondition.simpleStockKey} LIKE CONCAT('%',#{searchCondition.simpleStockValue},'%') 
					</if>	
				</trim>
			</if>
			GROUP BY cs.contractorName, p.productName	
			<if test="paramMap.startNum != null">
				LIMIT #{paramMap.startNum}, #{paramMap.rowPerPage};
			</if>
	</select>
	
	<!-- 재고수정처리 로케이션 상태 바꾸기(비었음 -> 사용중) -->
	<update id="K3InputLocationState">
		UPDATE
			k3_tb_location
		SET
			locationState = "사용중"
		WHERE
			locationCode = #{locationCode};
	</update>
	
	<!-- 재고수정처리 //로케이션 상태 바꾸기(사용중 -> 비었음) -->
	<update id="K3ReturnLocationState">
		UPDATE 
			k3_tb_location
		SET
			locationState = "비었음"
		WHERE
			locationCode = #{beforelocationCode};
	</update>
	
	<!--재고 수정처리  -->
	<update id="K3ModifyStock" parameterType="k3Stock">
		UPDATE k3_tb_stock
		SET
			locationCode = #{locationCode},
			stockQuantity = #{stockQuantity},
			pileupManager = #{pileupManager},
			pileupDate = #{pileupDate}
		WHERE
			stockCode = #{stockCode};
	</update>
	
	<!--재고 수정폼으로 이동 -->
	<select id="K3GetStockInfo" resultMap="stockResultMap">
		SELECT
			s.stockCode,
			p.productName,
			s.stockQuantity,
			p.categoryCode,
			tc.largeCategory,
			tc.mediumCategory,
			tc.smallCategory,
			w.productFrequency,
			s.locationCode,
			s.pileupManager,
			m.memberName AS pileupManagerName,
			s.pileupDate
		FROM
			k3_tb_stock AS s
			INNER JOIN
			k3_tb_warehousing AS w
			ON
			s.warehousingCode = w.warehousingCode
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode
			INNER JOIN
			k3_tb_total_category AS tc
			ON
			p.categoryCode = tc.categoryCode
			INNER JOIN
			k3_tb_member AS m
			ON
			s.pileupManager = m.memberId
	</select>
	
	<!--로케이션 상태 업데이트(사용중으로) -->
	<update id="k3UpdateLocationState">
	UPDATE 
		k3_tb_location
	SET 
		locationState = "사용중"
	WHERE
		locationCode = #{locationCode};
	</update>
	
	<!--재고등록 입고테이블 업데이트  -->
	<update id="k3UpdateSorting">
	UPDATE 
		k3_tb_warehousing
	SET 
		sorting = "Y"
	WHERE
		warehousingCode = #{warehousingCode};
	</update>
	
	<!-- 재고등록 -->
	<insert id="k3AddStock">
		INSERT INTO k3_tb_stock
			(stockCode, 
			warehousingCode, 
			locationCode, 
			stockQuantity, 
			pileupManager, 
			pileupDate)
		SELECT 
		   CONCAT(MAX(SUBSTRING(stockCode,1,5)), MAX(CAST(SUBSTRING(stockCode,6)AS DECIMAL))+ 1),
		   #{warehousingCode},
		   #{locationCode},
		   #{stockQuantity},
		   #{pileupManager},
		   #{pileupDate}
		FROM 
		  k3_tb_stock;
	
	</insert>
	
	<!--재고 등록 가능 리스트  -->
	<select id="k3AddStockList" resultMap="stockResultMap">
		SELECT
			w.warehousingCode,
			w.laydownCheckCode,
			p.productName,
			w.laydownGoodsCount,
			w.laydownDate,
			c.contractorName	
		FROM
			k3_tb_warehousing AS w
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode
			INNER JOIN
			k3_tb_contractor_staff AS c
			on
			w.contractorId = c.contractorId
		WHERE
			w.sorting = 'N' AND w.laydownCheckResult = 'Y';
	</select>

	<!--상세조회 재고현황 (초기화면)  -->
	<select id="k3GetStockByLocation" resultType="map" parameterType="map">
		SELECT
			s.stockCode,
			w.laydownCheckCode,
			p.productName,
			s.stockQuantity,
			c.contractorName,
			p.categoryCode,
			t.largeCategory,
			t.mediumCategory,
			t.smallCategory,
			s.locationCode,
			s.pileupDate,
			m.memberName AS pileupManagerName
		FROM
			k3_tb_stock AS s
			INNER JOIN
			k3_tb_warehousing AS w
			ON
			s.warehousingCode = w.warehousingCode
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode			
			INNER JOIN
			k3_tb_contractor_staff AS c
			ON
			w.contractorId = c.contractorId
			INNER JOIN
			k3_tb_total_category AS t
			ON
			p.categoryCode = t.categoryCode
			INNER JOIN
			k3_tb_member AS m
			ON
			s.pileupManager = m.memberId
		<if test="startNum != null">
			LIMIT #{startNum}, #{rowPerPage};
		</if>
	</select>
	
	<!--상세조회 재고현황 튜플 구하기(초기화면)  -->
	<select id="k3GetDetailCount" resultType="int" fetchSize="1000">
		SELECT
			COUNT(1)
		FROM
			k3_tb_stock AS s
			INNER JOIN
			k3_tb_warehousing AS w
			ON
			s.warehousingCode = w.warehousingCode
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode			
			INNER JOIN
			k3_tb_contractor_staff AS c
			ON
			w.contractorId = c.contractorId
			INNER JOIN
			k3_tb_total_category AS t
			ON
			p.categoryCode = t.categoryCode
			INNER JOIN
			k3_tb_member AS m
			ON
			s.pileupManager = m.memberId
		<if	test="countType eq 'search'.toString()">
		   	<if test="searchCondition.searchDetailStockType != null and searchCondition.searchDetailStockType != ''.toString()">
		   	<trim prefix="WHERE" prefixOverrides="AND |OR">
					<if test="searchCondition.detailStockValue != null and searchCondition.detailStockValue != ''.toString()">
			   			AND ${searchCondition.detailStockKey} LIKE CONCAT('%',#{searchCondition.detailStockValue},'%') 
					</if>	
					<if test="searchCondition.categoryValue != null and searchCondition.categoryValue != ''.toString()">
			   			AND ${searchCondition.categoryKey} LIKE CONCAT('%',#{searchCondition.categoryValue},'%') 
					</if>	
					<if test="searchCondition.searchStartDate != null and searchCondition.searchStartDate != ''.toString()">
			   			AND ${searchCondition.stockDateKey} >= #{searchCondition.searchStartDate}
					</if>	
					<if test="searchCondition.searchEndDate != null and searchCondition.searchEndDate != ''.toString()">
			   			AND #{searchCondition.searchEndDate} >=  ${searchCondition.stockDateKey}
					</if>
				</trim>
			</if>		
		</if>	
	</select>
	
	<!--간단조회 재고현황 (초기화면)  -->
	<select id="k3GetStockByStockName" resultType="map" parameterType="map">
		SELECT
			p.productName,
			cs.contractorName,
			SUM(s.stockQuantity) AS stockQuantity
		FROM
			k3_tb_stock AS s
			INNER JOIN
			k3_tb_warehousing AS w
			ON
			s.warehousingCode = w.warehousingCode
			INNER JOIN
			k3_tb_product AS p
			ON
			w.productCode = p.productCode			
			INNER JOIN
			k3_tb_contractor_staff AS cs
			ON
			w.contractorId = cs.contractorId
			GROUP BY cs.contractorName, p.productName
		<if test="startNum != null">
			LIMIT #{startNum}, #{rowPerPage};
		</if>
	</select>
	
	<!--간단조회 재고현황 튜플 구하기(초기화면)  -->
	<select id="k3GetSimpleCount" resultType="int" fetchSize="1000">
		SELECT
			COUNT(1)
		FROM
			(SELECT
				COUNT(1)
			FROM
				k3_tb_stock AS s
				INNER JOIN
				k3_tb_warehousing AS w
				ON
				s.warehousingCode = w.warehousingCode
				INNER JOIN
				k3_tb_product AS p
				ON
				w.productCode = p.productCode			
				INNER JOIN
				k3_tb_contractor_staff AS cs
				ON
				w.contractorId = cs.contractorId		
			<if	test="countType eq 'search'.toString()">
			   	<if test="searchCondition.searchSimpleStockType != null and searchCondition.searchSimpleStockType != ''.toString()">
			   		<trim prefix="WHERE" prefixOverrides="AND |OR">
						<if test="searchCondition.simpleStockValue != null and searchCondition.simpleStockValue != ''.toString()">
				   			AND ${searchCondition.simpleStockKey} LIKE CONCAT('%',#{searchCondition.laydownValue},'%') 
						</if>
					</trim>	
				</if>		
			</if>
			GROUP BY cs.contractorName, p.productName) as totalStock
	</select>
</mapper>