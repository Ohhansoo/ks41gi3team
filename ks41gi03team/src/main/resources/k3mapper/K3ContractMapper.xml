<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="k3.contract.ahs.mapper.K3ContractMapper">


	<!-- 계약 비용 등록(간단) -->
	<insert id="k3AddContract" parameterType="K3Contract" >
		INSERT INTO 
			k3_tb_contract_simple
				(contractCode, contractorCode, mainBusinessCode
				, contractorId, contractorDevision, contractPrice
				, contractPricePrepayment, contractPriceMonth, contractSingningDate
				, contractState, memberId)
			VALUES 
				(#{contractCode}, #{contractorCode}, '물류센터A물류센터_전북_1'
				, #{contractorId}, #{contractorDevision}, #{contractPrice}
				, #{contractPricePrepayment}, #{contractPriceMonth}, curdate()
				, '계약중', 'm_c01');
	</insert>
	
	<!-- 계약 비용 등록(비용) -->
	<insert id="k3AddLossContract" parameterType="K3Contract" >
	INSERT INTO 
		k3_tb_contract_loss_detail
			(contractCode, contractorCode, mainBusinessCode
			, contractorId, contractLossTon, contractLossDriverHeadcount
			, contractLossTerm, contractLossAccount, contractLossBank
			, contractLossManager, contractLossStartDate, contractLossEndDate
			, memberId)
		VALUES 
			(#{contractCode}, #{contractorCode}, '물류센터A물류센터_전북_1'
			, #{contractorId}, #{contractLossTon}, #{contractLossDriverHeadcount}
			, CONCAT(#{contractLossTerm},'개월'), #{contractLossAccount}, #{contractLossBank}
			, #{contractLossManager}, #{contractLossStartDate}, #{contractLossEndDate}
			, 'm_c01')
	</insert>

	<!-- 계약 대표코드 중복검사 -->
	<select id="contractCodeCheck" parameterType="String" resultType="int">
	SELECT
		COUNT(1)
	FROM 
		k3_tb_contract_loss_detail
	WHERE 
		contractCode = #{contractCode};	
	</select>

	<!-- 비용 등록페이지 거래처 모달창 -->
	<select id="K3GetContractor" resultType="K3Contractor">
		SELECT 
			c.contractorDevision,
			c.contractorCode,
			c.contractorId,
			cs.contractorSuperviser,
			c.contractorProfitBank,
			c.contractorProfitAccount
		FROM 
			k3_tb_contractor AS c
			INNER join
			k3_tb_contractor_staff AS cs
			on
			c.contractorId = cs.contractorId
		WHERE
			 cs.mainBusinessCode = '물류센터A물류센터_전북_1'
			 and
			 c.contractorDevision = '비용';
	</select>

	<!-- 비용 체결날짜 정해주기 -->
	<select id="contractSingningDate" resultType="map">
		SELECT 
			CURDATE() as contractSingningDate
		FROM 
			k3_tb_contract_simple;
	</select>
	<!-- END 비용 등록페이지 체결날짜 정해주기 -->

	<!-- 계약 상세정보 -->
	<select id="k3GetDetailContract" parameterType="String" resultType="K3Contract">
		<if test="contractorDevision == '매출'">
			SELECT 
				cpd.contractDetailCode, 
				cpd.contractCode, 
				cpd.contractorCode, 
				cpd.mainBusinessCode, 
				cpd.contractorId, 
				cpd.estimateNum, 
				cpd.unitPriceCode, 
				cpd.locationCode, 
				cpd.contractorProfitAccount, 
				cpd.contractorProfitBank, 
				cpd.contractProfitManager, 
				cpd.contractProfitStartDate, 
				cpd.contractProfitEndDate, 
				cpd.memberId,
				cs.contractorDevision,
				cs.contractPrice,
				cs.contractPricePrepayment,
				cs.contractPriceMonth,
				cs.contractSingningDate,
				cs.contractState,
				c.contractorName
			FROM 
				(k3_tb_contract_profit_detail AS cpd
				INNER join
				k3_tb_contract_simple AS cs
				on
				cpd.contractCode = cs.contractCode)
				INNER join
				k3_tb_contractor_staff AS c
				on
				cs.contractorId = c.contractorId
			WHERE
				cpd.contractCode = #{contractCode};		
		</if>
		<if test="contractorDevision == '비용'">
			SELECT 
				cld.contractCode, 
				cld.contractorCode, 
				cld.mainBusinessCode, 
				cld.contractorId, 
				cld.contractLossAccount, 
				cld.contractLossBank, 
				cld.contractLossStartDate, 
				cld.contractLossEndDate, 
				cld.memberId,
				cs.contractorDevision,
				cs.contractPrice,
				cs.contractPricePrepayment,
				cs.contractPriceMonth,
				cs.contractSingningDate,
				cs.contractState,
				cld.contractLossTerm,
				c.contractorName
			FROM 
				(k3_tb_contract_loss_detail AS cld
				INNER join
				k3_tb_contract_simple AS cs
				on
				cld.contractCode = cs.contractCode)
				INNER join
				k3_tb_contractor_staff AS c
				on
				cs.contractorId = c.contractorId
			WHERE
				cld.contractCode = #{contractCode};		
		</if>
	
	</select>

	
	<!-- 검색된 계약 투플 수  -->
	<select id="K3SearchContractCount" parameterType="map" resultType="map">
		SELECT
			cs.contractCode as contractCode,
			csf.contractorName as contractorName,
			cs.contractorCode as contractorCode,
			cs.contractorDevision as contractorDevision,
			cs.contractState as contractState,
			cs.contractSingningDate as contractSingningDate,
			cs.contractorId as contractorId,
			cs.memberId as memberId
		FROM
			k3_tb_contract_simple AS cs
			Inner join
			k3_tb_contractor_staff AS csf
			on
			cs.contractorId = csf.contractorId
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<if test="contractSingningDateStart != null and contractSingningDateStart != ''.toString() 
						and contractSingningDateEnd != null and contractSingningDateEnd != ''.toString()">
				 cs.contractSingningDate
	 			BETWEEN #{contractSingningDateStart} AND #{contractSingningDateEnd}
			</if>
			<if test='searchValue != null and searchValue != "".toString() and searchKey != "contractorName"'>
				AND cs.${searchKey} LIKE CONCAT('%', #{searchValue}, '%')
			</if>
			<if test='searchKey == "contractorName"'>
				AND csf.${searchKey} LIKE CONCAT('%', #{searchValue}, '%')
			</if>
		</trim>	
		ORDER BY
			cs.contractSingningDate DESC
		<if test="paramMap.startNum != null">
			LIMIT #{paramMap.startNum}, #{paramMap.rowPerPage};
		</if>		
	</select>
	
	<!-- 계약 검색(페이징) -->
	<select id="K3SearchContractList" parameterType="map" resultType="map">
		SELECT
			cs.contractCode as contractCode,
			csf.contractorName as contractorName,
			cs.contractorCode as contractorCode,
			cs.contractorDevision as contractorDevision,
			cs.contractState as contractState,
			cs.contractSingningDate as contractSingningDate,
			cs.contractorId as contractorId,
			cs.memberId as memberId
		FROM
			k3_tb_contract_simple AS cs
			Inner join
			k3_tb_contractor_staff AS csf
			on
			cs.contractorId = csf.contractorId
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<if test="contractSingningDateStart != null and contractSingningDateStart != ''.toString() 
						and contractSingningDateEnd != null and contractSingningDateEnd != ''.toString()">
				 cs.contractSingningDate
	 			BETWEEN #{contractSingningDateStart} AND #{contractSingningDateEnd}
			</if>
			<if test='searchValue != null and searchValue != "".toString() and searchKey != "contractorName"'>
				AND cs.${searchKey} LIKE CONCAT('%', #{searchValue}, '%')
			</if>
			<if test='searchKey == "contractorName"'>
				AND csf.${searchKey} LIKE CONCAT('%', #{searchValue}, '%')
			</if>
		</trim>	
		ORDER BY
			cs.contractSingningDate DESC
		<if test="paramMap.startNum != null">
			LIMIT #{paramMap.startNum}, #{paramMap.rowPerPage};
		</if>
	</select>

	<!-- 계약 투플 수 (페이징) -->
	<select id="k3GetContractCount" resultType="int" fetchSize="1000">
		SELECT
			COUNT(1)
		FROM
			k3_tb_contract_simple AS cs
			Inner join
			k3_tb_contractor_staff AS csf
			on
			cs.contractorId = csf.contractorId;
	</select>


	<!-- 계약 목록 간단 현황으로 불러오기(페이징) -->
	<select id="k3GetContractList" parameterType="map" resultType="map">
		SELECT
			cs.contractCode as contractCode,
			csf.contractorName as contractorName,
			cs.contractorCode as contractorCode,
			cs.contractorDevision as contractorDevision,
			cs.contractState as contractState,
			cs.contractSingningDate as contractSingningDate,
			cs.contractorId as contractorId,
			cs.memberId as memberId
		FROM
			k3_tb_contract_simple AS cs
			Inner join
			k3_tb_contractor_staff AS csf
			on
			cs.contractorId = csf.contractorId
		ORDER BY
			cs.contractSingningDate DESC
		<if test="startNum != null">
			LIMIT #{startNum}, #{rowPerPage};
		</if>			
	</select>

</mapper>